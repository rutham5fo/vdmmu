// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tb_heap_axi_tb_heap_axi,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.596000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=216,HLS_SYN_LUT=475,HLS_VERSION=2023_2}" *)

module tb_heap_axi (
        ap_clk,
        ap_rst_n,
        o_ps_addr_valid,
        o_ps_addr_valid_ap_vld,
        o_ps_trans_id,
        o_ps_trans_id_ap_vld,
        o_ps_addr,
        o_ps_addr_ap_vld,
        o_ps_wr_data,
        o_ps_wr_data_ap_vld,
        o_ps_we,
        o_ps_we_ap_vld,
        s_axi_PS_wr_AWVALID,
        s_axi_PS_wr_AWREADY,
        s_axi_PS_wr_AWADDR,
        s_axi_PS_wr_WVALID,
        s_axi_PS_wr_WREADY,
        s_axi_PS_wr_WDATA,
        s_axi_PS_wr_WSTRB,
        s_axi_PS_wr_ARVALID,
        s_axi_PS_wr_ARREADY,
        s_axi_PS_wr_ARADDR,
        s_axi_PS_wr_RVALID,
        s_axi_PS_wr_RREADY,
        s_axi_PS_wr_RDATA,
        s_axi_PS_wr_RRESP,
        s_axi_PS_wr_BVALID,
        s_axi_PS_wr_BREADY,
        s_axi_PS_wr_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_PS_WR_DATA_WIDTH = 32;
parameter    C_S_AXI_PS_WR_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_PS_WR_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [0:0] o_ps_addr_valid;
output   o_ps_addr_valid_ap_vld;
output  [7:0] o_ps_trans_id;
output   o_ps_trans_id_ap_vld;
output  [31:0] o_ps_addr;
output   o_ps_addr_ap_vld;
output  [7:0] o_ps_wr_data;
output   o_ps_wr_data_ap_vld;
output  [0:0] o_ps_we;
output   o_ps_we_ap_vld;
input   s_axi_PS_wr_AWVALID;
output   s_axi_PS_wr_AWREADY;
input  [C_S_AXI_PS_WR_ADDR_WIDTH - 1:0] s_axi_PS_wr_AWADDR;
input   s_axi_PS_wr_WVALID;
output   s_axi_PS_wr_WREADY;
input  [C_S_AXI_PS_WR_DATA_WIDTH - 1:0] s_axi_PS_wr_WDATA;
input  [C_S_AXI_PS_WR_WSTRB_WIDTH - 1:0] s_axi_PS_wr_WSTRB;
input   s_axi_PS_wr_ARVALID;
output   s_axi_PS_wr_ARREADY;
input  [C_S_AXI_PS_WR_ADDR_WIDTH - 1:0] s_axi_PS_wr_ARADDR;
output   s_axi_PS_wr_RVALID;
input   s_axi_PS_wr_RREADY;
output  [C_S_AXI_PS_WR_DATA_WIDTH - 1:0] s_axi_PS_wr_RDATA;
output  [1:0] s_axi_PS_wr_RRESP;
output   s_axi_PS_wr_BVALID;
input   s_axi_PS_wr_BREADY;
output  [1:0] s_axi_PS_wr_BRESP;
output   interrupt;

reg o_ps_trans_id_ap_vld;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] i_ps_trans_id;
wire   [31:0] i_ps_wr_addr;
wire   [31:0] i_ps_wr_data;
wire   [7:0] o_ps_wr_done;
reg    o_ps_wr_done_ap_vld;
reg   [31:0] i_ps_wr_data_read_reg_109;
reg   [31:0] i_ps_wr_addr_read_reg_114;
wire   [0:0] grp_ps_wr_data_fu_89_ap_return;
reg   [0:0] t_ps_wr_done_reg_119;
wire    ap_CS_fsm_state2;
wire    grp_ps_wr_data_fu_89_ap_start;
wire    grp_ps_wr_data_fu_89_ap_done;
wire    grp_ps_wr_data_fu_89_ap_idle;
wire    grp_ps_wr_data_fu_89_ap_ready;
wire   [31:0] grp_ps_wr_data_fu_89_o_ps_addr;
wire    grp_ps_wr_data_fu_89_o_ps_addr_ap_vld;
wire   [7:0] grp_ps_wr_data_fu_89_o_ps_wr_data;
wire    grp_ps_wr_data_fu_89_o_ps_wr_data_ap_vld;
wire   [0:0] grp_ps_wr_data_fu_89_o_ps_addr_valid;
wire    grp_ps_wr_data_fu_89_o_ps_addr_valid_ap_vld;
wire   [0:0] grp_ps_wr_data_fu_89_o_ps_we;
wire    grp_ps_wr_data_fu_89_o_ps_we_ap_vld;
reg    grp_ps_wr_data_fu_89_ap_start_reg;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_ps_wr_data_fu_89_ap_start_reg = 1'b0;
end

tb_heap_axi_ps_wr_data grp_ps_wr_data_fu_89(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ps_wr_data_fu_89_ap_start),
    .ap_done(grp_ps_wr_data_fu_89_ap_done),
    .ap_idle(grp_ps_wr_data_fu_89_ap_idle),
    .ap_ready(grp_ps_wr_data_fu_89_ap_ready),
    .i_base_addr(i_ps_wr_addr_read_reg_114),
    .i_wr_data(i_ps_wr_data_read_reg_109),
    .o_ps_addr(grp_ps_wr_data_fu_89_o_ps_addr),
    .o_ps_addr_ap_vld(grp_ps_wr_data_fu_89_o_ps_addr_ap_vld),
    .o_ps_wr_data(grp_ps_wr_data_fu_89_o_ps_wr_data),
    .o_ps_wr_data_ap_vld(grp_ps_wr_data_fu_89_o_ps_wr_data_ap_vld),
    .o_ps_addr_valid(grp_ps_wr_data_fu_89_o_ps_addr_valid),
    .o_ps_addr_valid_ap_vld(grp_ps_wr_data_fu_89_o_ps_addr_valid_ap_vld),
    .o_ps_we(grp_ps_wr_data_fu_89_o_ps_we),
    .o_ps_we_ap_vld(grp_ps_wr_data_fu_89_o_ps_we_ap_vld),
    .ap_return(grp_ps_wr_data_fu_89_ap_return)
);

tb_heap_axi_PS_wr_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_PS_WR_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_PS_WR_DATA_WIDTH ))
PS_wr_s_axi_U(
    .AWVALID(s_axi_PS_wr_AWVALID),
    .AWREADY(s_axi_PS_wr_AWREADY),
    .AWADDR(s_axi_PS_wr_AWADDR),
    .WVALID(s_axi_PS_wr_WVALID),
    .WREADY(s_axi_PS_wr_WREADY),
    .WDATA(s_axi_PS_wr_WDATA),
    .WSTRB(s_axi_PS_wr_WSTRB),
    .ARVALID(s_axi_PS_wr_ARVALID),
    .ARREADY(s_axi_PS_wr_ARREADY),
    .ARADDR(s_axi_PS_wr_ARADDR),
    .RVALID(s_axi_PS_wr_RVALID),
    .RREADY(s_axi_PS_wr_RREADY),
    .RDATA(s_axi_PS_wr_RDATA),
    .RRESP(s_axi_PS_wr_RRESP),
    .BVALID(s_axi_PS_wr_BVALID),
    .BREADY(s_axi_PS_wr_BREADY),
    .BRESP(s_axi_PS_wr_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .i_ps_trans_id(i_ps_trans_id),
    .i_ps_wr_addr(i_ps_wr_addr),
    .i_ps_wr_data(i_ps_wr_data),
    .o_ps_wr_done(o_ps_wr_done),
    .o_ps_wr_done_ap_vld(o_ps_wr_done_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ps_wr_data_fu_89_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_ps_wr_data_fu_89_ap_start_reg <= 1'b1;
        end else if ((grp_ps_wr_data_fu_89_ap_ready == 1'b1)) begin
            grp_ps_wr_data_fu_89_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_ps_wr_addr_read_reg_114 <= i_ps_wr_addr;
        i_ps_wr_data_read_reg_109 <= i_ps_wr_data;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t_ps_wr_done_reg_119 <= grp_ps_wr_data_fu_89_ap_return;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ps_wr_data_fu_89_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        o_ps_trans_id_ap_vld = 1'b1;
    end else begin
        o_ps_trans_id_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        o_ps_wr_done_ap_vld = 1'b1;
    end else begin
        o_ps_wr_done_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_ps_wr_data_fu_89_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_ps_wr_data_fu_89_ap_start = grp_ps_wr_data_fu_89_ap_start_reg;

assign o_ps_addr = grp_ps_wr_data_fu_89_o_ps_addr;

assign o_ps_addr_ap_vld = grp_ps_wr_data_fu_89_o_ps_addr_ap_vld;

assign o_ps_addr_valid = grp_ps_wr_data_fu_89_o_ps_addr_valid;

assign o_ps_addr_valid_ap_vld = grp_ps_wr_data_fu_89_o_ps_addr_valid_ap_vld;

assign o_ps_trans_id = i_ps_trans_id;

assign o_ps_we = grp_ps_wr_data_fu_89_o_ps_we;

assign o_ps_we_ap_vld = grp_ps_wr_data_fu_89_o_ps_we_ap_vld;

assign o_ps_wr_data = grp_ps_wr_data_fu_89_o_ps_wr_data;

assign o_ps_wr_data_ap_vld = grp_ps_wr_data_fu_89_o_ps_wr_data_ap_vld;

assign o_ps_wr_done = t_ps_wr_done_reg_119;

endmodule //tb_heap_axi
