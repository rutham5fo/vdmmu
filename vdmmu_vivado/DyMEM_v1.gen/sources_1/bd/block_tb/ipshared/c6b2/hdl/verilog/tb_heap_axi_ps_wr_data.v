// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tb_heap_axi_ps_wr_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_base_addr,
        i_wr_data,
        o_ps_addr,
        o_ps_addr_ap_vld,
        o_ps_wr_data,
        o_ps_wr_data_ap_vld,
        o_ps_addr_valid,
        o_ps_addr_valid_ap_vld,
        o_ps_we,
        o_ps_we_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_base_addr;
input  [31:0] i_wr_data;
output  [31:0] o_ps_addr;
output   o_ps_addr_ap_vld;
output  [7:0] o_ps_wr_data;
output   o_ps_wr_data_ap_vld;
output  [0:0] o_ps_addr_valid;
output   o_ps_addr_valid_ap_vld;
output  [0:0] o_ps_we;
output   o_ps_we_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg[31:0] o_ps_addr;
reg o_ps_addr_ap_vld;
reg o_ps_wr_data_ap_vld;
reg o_ps_addr_valid_ap_vld;
reg o_ps_we_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln30_fu_158_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] phi_ln48_reg_103;
reg   [0:0] ap_phi_mux_o_ps_wr_done_0_phi_fu_141_p4;
reg   [7:0] ap_phi_mux_storemerge3_phi_fu_116_p4;
wire   [7:0] trunc_ln34_1_fu_211_p1;
wire   [7:0] ap_phi_reg_pp0_iter0_storemerge3_reg_113;
wire   [0:0] tmp_fu_174_p3;
reg   [0:0] ap_phi_mux_storemerge2_phi_fu_127_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_storemerge2_reg_124;
wire   [0:0] ap_phi_reg_pp0_iter0_o_ps_wr_done_0_reg_137;
reg   [2:0] i_fu_58;
wire   [2:0] i_2_fu_164_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_1;
wire   [31:0] add_ln33_fu_182_p2;
wire   [31:0] zext_ln30_fu_170_p1;
wire   [1:0] trunc_ln34_fu_189_p1;
wire   [4:0] shl_ln_fu_193_p3;
wire   [31:0] zext_ln34_fu_201_p1;
wire   [31:0] lshr_ln34_fu_205_p2;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_55;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_58 = 3'd0;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

tb_heap_axi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((icmp_ln30_fu_158_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= phi_ln48_reg_103;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln30_fu_158_p2 == 1'd0)) begin
            i_fu_58 <= i_2_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_158_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln48_reg_103 <= ap_phi_mux_o_ps_wr_done_0_phi_fu_141_p4;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_158_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_158_p2 == 1'd0)) begin
        if ((tmp_fu_174_p3 == 1'd1)) begin
            ap_phi_mux_o_ps_wr_done_0_phi_fu_141_p4 = 1'd1;
        end else if ((tmp_fu_174_p3 == 1'd0)) begin
            ap_phi_mux_o_ps_wr_done_0_phi_fu_141_p4 = 1'd0;
        end else begin
            ap_phi_mux_o_ps_wr_done_0_phi_fu_141_p4 = ap_phi_reg_pp0_iter0_o_ps_wr_done_0_reg_137;
        end
    end else begin
        ap_phi_mux_o_ps_wr_done_0_phi_fu_141_p4 = ap_phi_reg_pp0_iter0_o_ps_wr_done_0_reg_137;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_158_p2 == 1'd0)) begin
        if ((tmp_fu_174_p3 == 1'd1)) begin
            ap_phi_mux_storemerge2_phi_fu_127_p4 = 1'd0;
        end else if ((tmp_fu_174_p3 == 1'd0)) begin
            ap_phi_mux_storemerge2_phi_fu_127_p4 = 1'd1;
        end else begin
            ap_phi_mux_storemerge2_phi_fu_127_p4 = ap_phi_reg_pp0_iter0_storemerge2_reg_124;
        end
    end else begin
        ap_phi_mux_storemerge2_phi_fu_127_p4 = ap_phi_reg_pp0_iter0_storemerge2_reg_124;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_158_p2 == 1'd0)) begin
        if ((tmp_fu_174_p3 == 1'd1)) begin
            ap_phi_mux_storemerge3_phi_fu_116_p4 = 8'd0;
        end else if ((tmp_fu_174_p3 == 1'd0)) begin
            ap_phi_mux_storemerge3_phi_fu_116_p4 = trunc_ln34_1_fu_211_p1;
        end else begin
            ap_phi_mux_storemerge3_phi_fu_116_p4 = ap_phi_reg_pp0_iter0_storemerge3_reg_113;
        end
    end else begin
        ap_phi_mux_storemerge3_phi_fu_116_p4 = ap_phi_reg_pp0_iter0_storemerge3_reg_113;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_158_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = phi_ln48_reg_103;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_58;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_55)) begin
        if ((tmp_fu_174_p3 == 1'd1)) begin
            o_ps_addr = i_base_addr;
        end else if ((tmp_fu_174_p3 == 1'd0)) begin
            o_ps_addr = add_ln33_fu_182_p2;
        end else begin
            o_ps_addr = 'bx;
        end
    end else begin
        o_ps_addr = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_174_p3 == 1'd1) & (icmp_ln30_fu_158_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_fu_174_p3 == 1'd0) & (icmp_ln30_fu_158_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        o_ps_addr_ap_vld = 1'b1;
    end else begin
        o_ps_addr_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_158_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        o_ps_addr_valid_ap_vld = 1'b1;
    end else begin
        o_ps_addr_valid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_158_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        o_ps_we_ap_vld = 1'b1;
    end else begin
        o_ps_we_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_158_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        o_ps_wr_data_ap_vld = 1'b1;
    end else begin
        o_ps_wr_data_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_182_p2 = (zext_ln30_fu_170_p1 + i_base_addr);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_55 = ((icmp_ln30_fu_158_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_o_ps_wr_done_0_reg_137 = 'bx;

assign ap_phi_reg_pp0_iter0_storemerge2_reg_124 = 'bx;

assign ap_phi_reg_pp0_iter0_storemerge3_reg_113 = 'bx;

assign i_2_fu_164_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign icmp_ln30_fu_158_p2 = ((ap_sig_allocacmp_i_1 == 3'd5) ? 1'b1 : 1'b0);

assign lshr_ln34_fu_205_p2 = i_wr_data >> zext_ln34_fu_201_p1;

assign o_ps_addr_valid = ap_phi_mux_storemerge2_phi_fu_127_p4;

assign o_ps_we = ap_phi_mux_storemerge2_phi_fu_127_p4;

assign o_ps_wr_data = ap_phi_mux_storemerge3_phi_fu_116_p4;

assign shl_ln_fu_193_p3 = {{trunc_ln34_fu_189_p1}, {3'd0}};

assign tmp_fu_174_p3 = ap_sig_allocacmp_i_1[32'd2];

assign trunc_ln34_1_fu_211_p1 = lshr_ln34_fu_205_p2[7:0];

assign trunc_ln34_fu_189_p1 = ap_sig_allocacmp_i_1[1:0];

assign zext_ln30_fu_170_p1 = ap_sig_allocacmp_i_1;

assign zext_ln34_fu_201_p1 = shl_ln_fu_193_p3;

endmodule //tb_heap_axi_ps_wr_data
