// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tb_ap_axi_get_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_ap_rd_data_vld_val,
        i_ap_rd_data,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] i_ap_rd_data_vld_val;
input  [7:0] i_ap_rd_data;
output  [31:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln128_fu_95_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [31:0] conv2_i_i_fu_68_p1;
reg  signed [31:0] conv2_i_i_reg_296;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln129_fu_121_p1;
reg   [1:0] trunc_ln129_reg_304;
wire   [0:0] icmp_ln129_fu_133_p2;
reg   [0:0] icmp_ln129_reg_309;
wire   [4:0] trunc_ln129_1_fu_139_p1;
reg   [4:0] trunc_ln129_1_reg_317;
reg   [31:0] t_rd_data_fu_48;
wire   [31:0] t_rd_data_1_fu_267_p2;
reg   [31:0] ap_sig_allocacmp_t_rd_data_load_1;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [7:0] empty_fu_52;
wire   [7:0] select_ln130_fu_143_p3;
reg   [7:0] ap_sig_allocacmp_p_load;
wire   [5:0] tmp_fu_85_p4;
wire   [7:0] add_ln130_fu_101_p2;
wire   [10:0] shl_ln129_1_fu_107_p3;
wire   [10:0] shl_ln_fu_125_p3;
wire   [10:0] add_ln129_fu_115_p2;
wire   [4:0] shl_ln_cast_fu_159_p3;
wire   [4:0] xor_ln129_fu_166_p2;
wire   [4:0] select_ln129_fu_172_p3;
wire   [4:0] select_ln129_2_fu_184_p3;
wire   [4:0] select_ln129_1_fu_178_p3;
wire   [4:0] xor_ln129_1_fu_191_p2;
wire   [31:0] zext_ln129_fu_197_p1;
wire   [31:0] shl_ln129_fu_209_p2;
reg   [31:0] tmp_1_fu_214_p4;
wire   [31:0] zext_ln129_1_fu_201_p1;
wire   [31:0] zext_ln129_2_fu_205_p1;
wire   [31:0] shl_ln129_2_fu_231_p2;
wire   [31:0] lshr_ln129_fu_237_p2;
wire   [31:0] and_ln129_fu_243_p2;
wire   [31:0] xor_ln129_2_fu_249_p2;
wire   [31:0] select_ln129_3_fu_224_p3;
wire   [31:0] and_ln129_1_fu_255_p2;
wire   [31:0] and_ln129_2_fu_261_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 t_rd_data_fu_48 = 32'd0;
#0 empty_fu_52 = 8'd0;
#0 ap_done_reg = 1'b0;
end

tb_ap_axi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln128_fu_95_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            empty_fu_52 <= select_ln130_fu_143_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_fu_52 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            t_rd_data_fu_48 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            t_rd_data_fu_48 <= t_rd_data_1_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2_i_i_reg_296 <= conv2_i_i_fu_68_p1;
        icmp_ln129_reg_309 <= icmp_ln129_fu_133_p2;
        trunc_ln129_1_reg_317[4 : 3] <= trunc_ln129_1_fu_139_p1[4 : 3];
        trunc_ln129_reg_304 <= trunc_ln129_fu_121_p1;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_95_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_p_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_t_rd_data_load_1 = 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_t_rd_data_load_1 = t_rd_data_1_fu_267_p2;
        end else begin
            ap_sig_allocacmp_t_rd_data_load_1 = t_rd_data_fu_48;
        end
    end else begin
        ap_sig_allocacmp_t_rd_data_load_1 = t_rd_data_fu_48;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln129_fu_115_p2 = ($signed(shl_ln129_1_fu_107_p3) + $signed(11'd2047));

assign add_ln130_fu_101_p2 = (ap_sig_allocacmp_p_load + 8'd1);

assign and_ln129_1_fu_255_p2 = (xor_ln129_2_fu_249_p2 & t_rd_data_fu_48);

assign and_ln129_2_fu_261_p2 = (select_ln129_3_fu_224_p3 & and_ln129_fu_243_p2);

assign and_ln129_fu_243_p2 = (shl_ln129_2_fu_231_p2 & lshr_ln129_fu_237_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_return = ap_sig_allocacmp_t_rd_data_load_1;

assign conv2_i_i_fu_68_p1 = $signed(i_ap_rd_data);

assign icmp_ln128_fu_95_p2 = (($signed(tmp_fu_85_p4) < $signed(6'd1)) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_133_p2 = ((shl_ln_fu_125_p3 > add_ln129_fu_115_p2) ? 1'b1 : 1'b0);

assign lshr_ln129_fu_237_p2 = 32'd4294967295 >> zext_ln129_2_fu_205_p1;

assign select_ln129_1_fu_178_p3 = ((icmp_ln129_reg_309[0:0] == 1'b1) ? trunc_ln129_1_reg_317 : shl_ln_cast_fu_159_p3);

assign select_ln129_2_fu_184_p3 = ((icmp_ln129_reg_309[0:0] == 1'b1) ? xor_ln129_fu_166_p2 : shl_ln_cast_fu_159_p3);

assign select_ln129_3_fu_224_p3 = ((icmp_ln129_reg_309[0:0] == 1'b1) ? tmp_1_fu_214_p4 : shl_ln129_fu_209_p2);

assign select_ln129_fu_172_p3 = ((icmp_ln129_reg_309[0:0] == 1'b1) ? shl_ln_cast_fu_159_p3 : trunc_ln129_1_reg_317);

assign select_ln130_fu_143_p3 = ((i_ap_rd_data_vld_val[0:0] == 1'b1) ? add_ln130_fu_101_p2 : ap_sig_allocacmp_p_load);

assign shl_ln129_1_fu_107_p3 = {{add_ln130_fu_101_p2}, {3'd0}};

assign shl_ln129_2_fu_231_p2 = 32'd4294967295 << zext_ln129_1_fu_201_p1;

assign shl_ln129_fu_209_p2 = conv2_i_i_reg_296 << zext_ln129_fu_197_p1;

assign shl_ln_cast_fu_159_p3 = {{trunc_ln129_reg_304}, {3'd0}};

assign shl_ln_fu_125_p3 = {{ap_sig_allocacmp_p_load}, {3'd0}};

assign t_rd_data_1_fu_267_p2 = (and_ln129_2_fu_261_p2 | and_ln129_1_fu_255_p2);

integer ap_tvar_int_0;

always @ (shl_ln129_fu_209_p2) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_1_fu_214_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_214_p4[ap_tvar_int_0] = shl_ln129_fu_209_p2[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_fu_85_p4 = {{ap_sig_allocacmp_p_load[7:2]}};

assign trunc_ln129_1_fu_139_p1 = add_ln129_fu_115_p2[4:0];

assign trunc_ln129_fu_121_p1 = ap_sig_allocacmp_p_load[1:0];

assign xor_ln129_1_fu_191_p2 = (select_ln129_fu_172_p3 ^ 5'd31);

assign xor_ln129_2_fu_249_p2 = (32'd4294967295 ^ and_ln129_fu_243_p2);

assign xor_ln129_fu_166_p2 = (shl_ln_cast_fu_159_p3 ^ 5'd31);

assign zext_ln129_1_fu_201_p1 = select_ln129_1_fu_178_p3;

assign zext_ln129_2_fu_205_p1 = xor_ln129_1_fu_191_p2;

assign zext_ln129_fu_197_p1 = select_ln129_2_fu_184_p3;

always @ (posedge ap_clk) begin
    trunc_ln129_1_reg_317[2:0] <= 3'b111;
end

endmodule //tb_ap_axi_get_data
