// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module tb_ap_axi_put_addr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_ap_port_rdy_val,
        i_pu_rd_addr,
        o_ap_rd_addr,
        o_ap_rd_addr_ap_vld,
        o_ap_rd_addr_vld,
        o_ap_rd_addr_vld_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] i_ap_port_rdy_val;
input  [31:0] i_pu_rd_addr;
output  [31:0] o_ap_rd_addr;
output   o_ap_rd_addr_ap_vld;
output  [0:0] o_ap_rd_addr_vld;
output   o_ap_rd_addr_vld_ap_vld;

reg ap_idle;
reg o_ap_rd_addr_ap_vld;
reg o_ap_rd_addr_vld_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln105_fu_91_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] empty_fu_42;
wire   [7:0] select_ln108_fu_114_p3;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_p_load;
wire  signed [7:0] tmp_fu_81_p1;
wire   [5:0] tmp_fu_81_p4;
wire  signed [7:0] sext_ln106_fu_97_p0;
wire  signed [31:0] sext_ln106_fu_97_p1;
wire  signed [7:0] add_ln108_fu_108_p0;
wire   [7:0] add_ln108_fu_108_p2;
wire  signed [7:0] select_ln108_fu_114_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 empty_fu_42 = 8'd0;
#0 ap_done_reg = 1'b0;
end

tb_ap_axi_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln105_fu_91_p2 == 1'd1)) begin
            empty_fu_42 <= select_ln108_fu_114_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_fu_42 <= 8'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln105_fu_91_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_load = 8'd0;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_42;
    end
end

always @ (*) begin
    if (((icmp_ln105_fu_91_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        o_ap_rd_addr_ap_vld = 1'b1;
    end else begin
        o_ap_rd_addr_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln105_fu_91_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        o_ap_rd_addr_vld_ap_vld = 1'b1;
    end else begin
        o_ap_rd_addr_vld_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln108_fu_108_p0 = ap_sig_allocacmp_p_load;

assign add_ln108_fu_108_p2 = ($signed(add_ln108_fu_108_p0) + $signed(8'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln105_fu_91_p2 = (($signed(tmp_fu_81_p4) < $signed(6'd1)) ? 1'b1 : 1'b0);

assign o_ap_rd_addr = ($signed(sext_ln106_fu_97_p1) + $signed(i_pu_rd_addr));

assign o_ap_rd_addr_vld = i_ap_port_rdy_val;

assign select_ln108_fu_114_p2 = ap_sig_allocacmp_p_load;

assign select_ln108_fu_114_p3 = ((i_ap_port_rdy_val[0:0] == 1'b1) ? add_ln108_fu_108_p2 : select_ln108_fu_114_p2);

assign sext_ln106_fu_97_p0 = ap_sig_allocacmp_p_load;

assign sext_ln106_fu_97_p1 = sext_ln106_fu_97_p0;

assign tmp_fu_81_p1 = ap_sig_allocacmp_p_load;

assign tmp_fu_81_p4 = {{tmp_fu_81_p1[7:2]}};

endmodule //tb_ap_axi_put_addr
